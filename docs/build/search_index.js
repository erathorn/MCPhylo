var documenterSearchIndex = {"docs":
[{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"","category":"page"},{"location":"index.html#Adding-MCPhylo","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"","category":"section"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"using Pkg\r\nPkg.add(\"MCPhylo\")","category":"page"},{"location":"index.html#Parsing-Functionality","page":"Adding MCPhylo","title":"Parsing Functionality","text":"","category":"section"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.ParseNewick","category":"page"},{"location":"index.html#Main.MCPhylo.ParseNewick","page":"Adding MCPhylo","title":"Main.MCPhylo.ParseNewick","text":"ParseNewick(filename::String)\n\nThis is the main function, which parses a file, containing Newick strings.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.ParseCSV","category":"page"},{"location":"index.html#Main.MCPhylo.ParseCSV","page":"Adding MCPhylo","title":"Main.MCPhylo.ParseCSV","text":"ParseCSV(filename::String)\n\nThis function parses a CSV file which stores the input for the MCMC compuation. The file should follow the conventions used for MrBayes.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.ParseNexus","category":"page"},{"location":"index.html#Main.MCPhylo.ParseNexus","page":"Adding MCPhylo","title":"Main.MCPhylo.ParseNexus","text":"ParseNexus(filename::String)\n\nThis function parses a NEXUS file which stores the input for the MCMC compuation. The file should follow the conventions used for MrBayes.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Tree-Manipulation","page":"Adding MCPhylo","title":"Tree Manipulation","text":"","category":"section"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.move!","category":"page"},{"location":"index.html#Main.MCPhylo.move!","page":"Adding MCPhylo","title":"Main.MCPhylo.move!","text":"move!(node1::Node, node2::Node, proportion::Float64)\n\nChange the incomming length of node1 and node2 while keeping there combined length constant.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.merge_trees!","category":"page"},{"location":"index.html#Main.MCPhylo.merge_trees!","page":"Adding MCPhylo","title":"Main.MCPhylo.merge_trees!","text":"merge_trees!(ref_tree::T, tree::T)::Tuple{T, Vector{T}} where T<:AbstractNode\n\nMerge two compatible trees, i.e. inserts all cluster of the first tree, which aren't already in the second tree, into the secon tree\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.ladderize_tree!","category":"page"},{"location":"index.html#Main.MCPhylo.ladderize_tree!","page":"Adding MCPhylo","title":"Main.MCPhylo.ladderize_tree!","text":"ladderize_tree!(root::T, ascending::Bool=true)::Nothing where T<:AbstractNode)\n\nThis function ladderizes a tree inplace, i.e. sorts the nodes on all levels by the count of their descendants\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.prune_tree!","category":"page"},{"location":"index.html#Main.MCPhylo.prune_tree!","page":"Adding MCPhylo","title":"Main.MCPhylo.prune_tree!","text":"prune_tree!(root::T, node_names::Vector{String})::Nothing where T<:AbstractNode\n\nIn-place version of prune_tree\n\n\n\n\n\nprune_tree!(root::T, node_names::Vector{T})::Nothing where T<:AbstractNode\n\nIn-place version of prune_tree\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.prune_tree","category":"page"},{"location":"index.html#Main.MCPhylo.prune_tree","page":"Adding MCPhylo","title":"Main.MCPhylo.prune_tree","text":"prune_tree(root::T, node_names::Vector{String})::T where T<:AbstractNode\n\nThis function returns a copy of a tree with specific nodes including their descendants removed\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.add_child!","category":"page"},{"location":"index.html#Main.MCPhylo.add_child!","page":"Adding MCPhylo","title":"Main.MCPhylo.add_child!","text":"add_child!(mother_node::Node, child::Node, child_position::Union{Int64, Missing}=missing)\n\nThis function adds a child to the mother node. The arity of the mother node is increased by 1 and the root status of the child is set to False.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.remove_child!","category":"page"},{"location":"index.html#Main.MCPhylo.remove_child!","page":"Adding MCPhylo","title":"Main.MCPhylo.remove_child!","text":"remove_child!(mother_node::Node, left::Bool)::Node\n\nThis function removes a child from the list of nodes which are daughters of this node. The removed node is returned.\n\n\n\n\n\nremove_child!(mother_node::Node, child::Node)::Node\n\nThis function removes a child from the list of nodes which are daughters of this node. The removed node is returned.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.create_tree_from_leaves","category":"page"},{"location":"index.html#Main.MCPhylo.create_tree_from_leaves","page":"Adding MCPhylo","title":"Main.MCPhylo.create_tree_from_leaves","text":"create_tree_from_leaves(leaf_nodes::Vector{T})::Node\n\nThis function creates a  random binary tree from a list of leaf nodes. The root node as access point for the tree is returned.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.create_tree_from_leaves_bin","category":"page"},{"location":"index.html#Main.MCPhylo.create_tree_from_leaves_bin","page":"Adding MCPhylo","title":"Main.MCPhylo.create_tree_from_leaves_bin","text":"create_tree_from_leaves(leaf_nodes::Vector{T})::Node\n\nThis function creates a  random binary tree from a list of leaf nodes. The root node as access point for the tree is returned.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.insert_node!","category":"page"},{"location":"index.html#Main.MCPhylo.insert_node!","page":"Adding MCPhylo","title":"Main.MCPhylo.insert_node!","text":"insert_node!(mother::Node, children::Vector{T})::T where T<:AbstractNode\n\nThis function inserts a node into a tree after a mother node and gains a subset of the mother's children as its children. Returns the inserted node.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.number_nodes!","category":"page"},{"location":"index.html#Main.MCPhylo.number_nodes!","page":"Adding MCPhylo","title":"Main.MCPhylo.number_nodes!","text":"number_nodes!(root::T)::Nothing  where T<:GeneralNode\n\nThis function assigns a unique, sequential number to each node.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.perform_spr","category":"page"},{"location":"index.html#Main.MCPhylo.perform_spr","page":"Adding MCPhylo","title":"Main.MCPhylo.perform_spr","text":"perform_spr(root::Node)\n\nperforms SPR on binary tree\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.risky_SPR","category":"page"},{"location":"index.html#Main.MCPhylo.risky_SPR","page":"Adding MCPhylo","title":"Main.MCPhylo.risky_SPR","text":"    risky_SPR(root::Node)::AbstractNode\nPerforms SPR on tree in place; takes reference to root of tree, boolean value necessary to determine if tree should be treated as binary or not\nReturns copy of root of altered tree. Does not check for correct formatting of tree.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.risky_SPR!","category":"page"},{"location":"index.html#Main.MCPhylo.risky_SPR!","page":"Adding MCPhylo","title":"Main.MCPhylo.risky_SPR!","text":"    risky_SPR!(root::Node)::AbstractNode\nPerforms SPR on tree in place; takes reference to root of tree, boolean value necessary to determine if tree should be treated as binary or not\nReturns reference to root of altered tree. Does not check for correct formatting of tree.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Return-Functions","page":"Adding MCPhylo","title":"Return Functions","text":"","category":"section"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.newick","category":"page"},{"location":"index.html#Main.MCPhylo.newick","page":"Adding MCPhylo","title":"Main.MCPhylo.newick","text":"newick(node::Node)::String\n\nCreates a newick represnetation of the tree.\n\n\n\n\n\nnewick(root::T, newickstring::AbstractString) where T<:GeneralNode\n\nDo the newick recursion. It is meant as the internal iterator function.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.tree_height","category":"page"},{"location":"index.html#Main.MCPhylo.tree_height","page":"Adding MCPhylo","title":"Main.MCPhylo.tree_height","text":"tree_height(root::T)::Float64  where T<:GeneralNode\n\nThis function calculates the tree height.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.level_order","category":"page"},{"location":"index.html#Main.MCPhylo.level_order","page":"Adding MCPhylo","title":"Main.MCPhylo.level_order","text":"level_order(node::T)::Array{T} where T<:GeneralNode\n\nThis function does level order traversal. Only the root node needs to be supplied.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.tree_length","category":"page"},{"location":"index.html#Main.MCPhylo.tree_length","page":"Adding MCPhylo","title":"Main.MCPhylo.tree_length","text":"tree_length(root::T)::Float64  where T<:GeneralNode\n\nThis function calculates the tree length.\n\n\n\n\n\ntree_length(root::T, tl::Float64)::Float64 where T<:GeneralNode\n\nThis function does the internal tree length recursion\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.get_leaves","category":"page"},{"location":"index.html#Main.MCPhylo.get_leaves","page":"Adding MCPhylo","title":"Main.MCPhylo.get_leaves","text":"post_order(root::T, traversal::Vector{T})::Vector{T} where T<:GeneralNode\n\nThis function performs a post order traversal through the tree. It is assumed that root is the root of the tree. Thus, if root is not the root, the subtree defined by the root root is used for the post order traversal.\n\n\n\n\n\npost_order(root::T)::Vector{T} where T<:GeneralNode\n\nThis function does post order traversal. Only the root node needs to be supplied.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.get_bipartitions","category":"page"},{"location":"index.html#Main.MCPhylo.get_bipartitions","page":"Adding MCPhylo","title":"Main.MCPhylo.get_bipartitions","text":"get_bipartitions(tree::T)::Vector{Tuple} where T <:GeneralNode\n\nGet a vector of all bipartions of tree. The resulting vector contains Tuples of sets representing the bipartions.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.get_sister","category":"page"},{"location":"index.html#Main.MCPhylo.get_sister","page":"Adding MCPhylo","title":"Main.MCPhylo.get_sister","text":"get_sister(node::T)::T  where T<:GeneralNode\n\nThis function gets the sister of node. It does so by looking for the respective binary representation of the sister.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.get_branchlength_vector","category":"page"},{"location":"index.html#Main.MCPhylo.get_branchlength_vector","page":"Adding MCPhylo","title":"Main.MCPhylo.get_branchlength_vector","text":"get_branchlength_vector(root::N)::Vector{T}  where {N <:GeneralNode, T<:Real}\n\nGet the vector of branch lengths of the tree.\n\n\n\n\n\nget_branchlength_vector(t::TreeStochastic)\n\nGet the vector of branch lengths of the tree.\n\n\n\n\n\nget_branchlength_vector(root::N, out_vec::Vector{T}) where {N<:GeneralNode, T<:Real}\n\nDo post order traversal to retrieve a vector of branch lengths.\n\n\n\n\n\nget_branchlength_vector(post_order::Vector{Node})::Vector{Float64}\n\nReturn a vector of branch lengths.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.get_mother","category":"page"},{"location":"index.html#Main.MCPhylo.get_mother","page":"Adding MCPhylo","title":"Main.MCPhylo.get_mother","text":"function get_mother(node::T)::T  where T<:GeneralNode\n\nThis function gets the mother of node. It does so by looking for the respective binary representation of the mother node.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Adding MCPhylo","title":"Adding MCPhylo","text":"MCPhylo.get_sum_seperate_length!","category":"page"},{"location":"index.html#Main.MCPhylo.get_sum_seperate_length!","page":"Adding MCPhylo","title":"Main.MCPhylo.get_sum_seperate_length!","text":"get_sum_seperate_length!(root::Node)::Vector{Float64}\n\nThis function gets the sum of the branch lengths of the internal branches and the branches leading to the leave nodes.\n\n\n\n\n\nget_sum_seperate_length!(root::Node)::Vector{Float64}\n\nThis function gets the sum of the branch lengths of the internal branches and the branches leading to the leave nodes.\n\n\n\n\n\n","category":"function"}]
}
